import tkinter as tk
from tkinter import filedialog, messagebox
import threading
from exam_scheduler import ExamScheduler  

class ExamSchedulerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Exam Scheduler Optimizer")
        self.root.geometry("500x300")

        self.data_folder = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="Exam Scheduling System", font=("Helvetica", 16, "bold")).pack(pady=10)

        frame = tk.Frame(self.root)
        frame.pack(pady=10)

        tk.Label(frame, text="Select Data Folder:").grid(row=0, column=0, padx=5, pady=5)
        tk.Entry(frame, textvariable=self.data_folder, width=40).grid(row=0, column=1, padx=5)
        tk.Button(frame, text="Browse", command=self.browse_folder).grid(row=0, column=2, padx=5)

        tk.Button(self.root, text="Run Optimization", command=self.run_scheduler, bg="green", fg="white").pack(pady=15)

        self.status_label = tk.Label(self.root, text="", fg="blue")
        self.status_label.pack(pady=5)

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.data_folder.set(folder_selected)

    def run_scheduler(self):
        folder = self.data_folder.get()
        if not folder:
            messagebox.showerror("Error", "Please select a data folder first.")
            return

        self.status_label.config(text="Running optimization... Please wait.")
        threading.Thread(target=self.run_scheduler_thread, args=(folder,)).start()

    def run_scheduler_thread(self, folder):
        try:
            scheduler = ExamScheduler(folder)
            final_schedule = scheduler.run()

            if final_schedule is not None:
                messagebox.showinfo("Success", "Schedule optimized and saved successfully!")
            else:
                messagebox.showerror("Failed", "Optimization failed. Check console output.")

        except Exception as e:
            messagebox.showerror("Error", str(e))
        finally:
            self.status_label.config(text="Done.")


if __name__ == "__main__":
    root = tk.Tk()
    app = ExamSchedulerGUI(root)
    root.mainloop()
